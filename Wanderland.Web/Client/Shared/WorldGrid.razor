@page "/grid/{worldName?}"
@inject IWanderlandHttpApiClient _apiClient
@inject ILogger<WorldGrid> _logger
@inject WanderlandHubClient _hubClient

<MudGrid>
    <MudItem xs="12">
        <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">@World.Name</MudPaper>
    </MudItem>
</MudGrid>
    @for (int row = 0; row < World.Rows; row++)
    {
        int currentRow = row;
<MudGrid Spacing="2" Justify="Justify.Center" Class="d-flex flex-nowrap">
    @for (int col = 0; col < World.Columns; col++)
    {
        int currentColumn = col;
        <MudItem>
            <Tile Row="@currentRow" Column="@currentColumn" WorldName="@WorldName" />
        </MudItem>
    }
</MudGrid>
    }
<MudGrid>
    <MudItem xs="12">
        <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">
            <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="_ => { _apiClient.DeleteWorld(WorldName); StateHasChanged(); }">Delete</MudButton>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    [Parameter]
    public string? WorldName { get; set; }
    public World World { get; set; } = new World();

    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrEmpty(WorldName))
        {
            World = new World();
            StateHasChanged();
            World = await _apiClient.GetWorld(WorldName);
            await _hubClient.JoinWorld(WorldName);
        }
    }
}

