@page "/grid/{worldName?}"
@inject IWanderlandHttpApiClient _apiClient
@inject ILogger<WorldGrid> _logger
@inject WanderlandHubClient _hubClient

<MudGrid Spacing="2">
    <MudItem xs="8">
        @for (int row = 0; row < World.Rows; row++)
        {
            int currentRow = row;
            <MudGrid Spacing="2" Justify="Justify.Center" Class="d-flex flex-nowrap">
                @for (int col = 0; col < World.Columns; col++)
                {
                    int currentColumn = col;
                    <MudItem>
                        <Tile Row="@currentRow" Column="@currentColumn" WorldName="@WorldName" />
                    </MudItem>
                }
            </MudGrid>
        }
    </MudItem>
    <MudItem xs="4">
        <MudCard>
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h4">@WorldName</MudText>
                    <MudText Typo="Typo.caption">Current World</MudText>
                </CardHeaderContent>
                <CardHeaderActions>
                    <MudIconButton Icon="@Icons.Material.Filled.DeleteOutline" Color="Color.Default" OnClick="_ => { _apiClient.DeleteWorld(WorldName); StateHasChanged(); }" /> 
                </CardHeaderActions>
            </MudCardHeader>
            <MudCardContent>
                <MudText Typo="Typo.h6">Age</MudText>
                <MudText Typo="Typo.caption">@($"{_age.ToString("hh\\:mm\\:ss")}")</MudText>
            </MudCardContent>
            <MudCardActions>
                <MudButton Variant="Variant.Text" Color="Color.Primary">Read More</MudButton>
            </MudCardActions>
        </MudCard>
    </MudItem>
</MudGrid>

@code {
    [Parameter]
    public string? WorldName { get; set; }
    public World World { get; set; } = new World();
    private TimeSpan _age;

    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrEmpty(WorldName))
        {
            World = new World();
            StateHasChanged();
            World = await _apiClient.GetWorld(WorldName);
            await _hubClient.JoinWorld(WorldName);
            _hubClient.WorldAgeUpdate -= OnWorldAgeUpdated;
            _hubClient.WorldAgeUpdate += OnWorldAgeUpdated;
        }
    }

    private void OnWorldAgeUpdated(object? sender, WorldAgeUpdatedEventArgs args)
    {
        _age = args.Age;
        base.StateHasChanged();
    }
}

