@using Wanderland.Web.Shared
@inject Wanderland.Web.Shared.IWanderlandHttpApiClient _apiClient
@inject Wanderland.Web.Client.Services.WanderlandHubClient _hubClient

<MudPaper Height="80px"
          Width="80px"
          Class="ma-auto pa-4"
          Style='@($"background:{GetColorForTile()}")'>
    <MudAvatarGroup Max="5" Spacing="2" MaxColor="Color.Primary">
        @if (Model != null)
        {
            @foreach (var wanderer in Model.WanderersHere)
            {
                <MudAvatar Color="Color.Success" Variant="Variant.Filled" Size="Size.Small">
                    <MudIcon Color="Color.Dark" Icon="@Icons.Material.Filled.DirectionsWalk" Size="Size.Small" />
                </MudAvatar>
            }
        }

    </MudAvatarGroup>
</MudPaper>

@code {
    [Parameter]
    public int Row { get; set; }

    [Parameter]
    public int Column { get; set; }

    [Parameter]
    public string? WorldName { get; set; }

    private Wanderland.Web.Shared.Tile Model { get; set; }
    private TileType TileType;
    private bool shouldRender = false;

    protected override bool ShouldRender() => shouldRender;

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(WorldName))
        {
            Model = await _apiClient.GetTileCurrentState(WorldName, Row, Column);
            _hubClient.TileUpdate += (s, args) =>
            {
                if (args.Tile.World == this.WorldName && args.Tile.Row == this.Row && args.Tile.Column == this.Column)
                {
                    Model = args.Tile;
                    Console.WriteLine($"World {this.WorldName} tile {Model.Row}/{Model.Column} has {Model.WanderersHere.Count} wanderer(s).");
                    base.StateHasChanged();
                }

            };
            TileType = Model.Type;
            shouldRender = true;
        }
    }

    protected string GetColorForTile()
    {
        if (Model?.Type == TileType.Barrier)
            return Colors.BlueGrey.Darken4;

        return Colors.BlueGrey.Default;
    }
}
